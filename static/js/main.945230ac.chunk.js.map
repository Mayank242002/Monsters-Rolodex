{"version":3,"sources":["components/Card/Card.jsx","components/CardList/Cardlist.jsx","components/Searchbox/Searchbox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","Cardlist","monsters","map","Searchbox","type","placeholder","onChange","handlechange","App","useState","setMonsters","searchfield","setSearchfield","useEffect","fetch","then","response","json","users","filteredmonsters","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAgBeA,MAbf,SAAcC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,kBAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCGTC,MAVf,SAAkBR,GAChB,OACE,qBAAKC,UAAU,WAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GACnB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,U,YCOnBO,MAXf,SAAmBX,GACjB,OACE,uBACEC,UAAU,SACVW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,gBCuBPC,MA1Bf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOR,EAAP,KAAiBS,EAAjB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACRC,MAAM,+CAA+CC,MAAK,SAACC,GAAD,OACxDA,EAASC,OAAOF,MAAK,SAACG,GAAD,OAAWR,EAAYQ,WAE7C,IAEH,IAAMC,EAAmBlB,EAASmB,QAAO,SAACzB,GACxC,OAAOA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAOzD,OACE,sBAAK5B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAWY,YAAY,kBAAkBE,aAP7C,SAAsBgB,GACpBX,EAAeW,EAAEC,OAAOC,UAOtB,cAAC,EAAD,CAAUxB,SAAUkB,QCjBXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.945230ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className='card-container'>\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        alt='monstersimage'\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './Cardlist.css';\r\nimport Card from '../Card/Card';\r\n\r\nfunction Cardlist(props) {\r\n  return (\r\n    <div className='Cardlist'>\r\n      {props.monsters.map((monster) => {\r\n        return <Card key={monster.id} monster={monster}></Card>;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\nimport './Searchbox.css';\r\n\r\nfunction Searchbox(props) {\r\n  return (\r\n    <input\r\n      className='search'\r\n      type='search'\r\n      placeholder={props.placeholder}\r\n      onChange={props.handlechange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Cardlist from './components/CardList/Cardlist';\n\nimport './App.css';\nimport Searchbox from './components/Searchbox/Searchbox';\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchfield, setSearchfield] = useState('');\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users#').then((response) =>\n      response.json().then((users) => setMonsters(users))\n    );\n  }, []);\n\n  const filteredmonsters = monsters.filter((monster) => {\n    return monster.name.toLowerCase().includes(searchfield.toLowerCase());\n  });\n\n  function handlechange(e) {\n    setSearchfield(e.target.value);\n  }\n\n  return (\n    <div className='App'>\n      <h1>Monsters Rolodex </h1>\n      <Searchbox placeholder='search monsters' handlechange={handlechange} />\n      <Cardlist monsters={filteredmonsters}></Cardlist>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}